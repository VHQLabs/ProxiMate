# Project-wide Gradle Settings

# MEMORY RELATED CONFIG ====================================================================================================================

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx10248m -XX:MaxPermSize=256m
org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# Dex memory allocation should be at least 2gb less than the gradle memory allocation above. This allows for dex in process builds where the
# dex process runs in the same VM as gradle does. For more info see
# https://medium.com/google-developers/faster-android-studio-builds-with-dex-in-process-5988ed8aa37e#.qh098djyi
dexMemoryAllocation=2g


# OTHER GRADLE RELATED CONFIG ==============================================================================================================

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=false

# Keep gradle in a daemon thread that doesn't restart for every build, decreases initial build startup time
org.gradle.daemon=true

# Don't configure all modules on every build, decreases build time
org.gradle.configureondemand=true



# DEV LOCAL CONFIG =========================================================================================================================

# Speed hack to decrease dev build times. Doesn't do anything as it is, but if a developer wants to they can change the
# "increaseMinSdkForDev" property from "false" to "true" and create an apk with minSdk = 21 that takes advantage of the ART runtime support
# for multidex, resulting in faster builds. For more info see: https://developer.android.com/studio/build/multidex.html
increaseMinSdkForDev=true


# Speed hack to decrease dev build times. Doesn't do anything as it is, but if a developer wants to they can enable this speed hack by
# changing the "disableSomeBuildTypes" property from "false" to "true" and then set the build type that they want to keep with the
# "disableAllBuildTypesApartFrom" property. This will get rid of all build types apart from the one declared and make the build a bit faster
disableSomeBuildTypes=false
disableAllBuildTypesApartFrom=debug

# Speed hack to decrease dev build times. Doesn't do anything as it is, but if a developer wants to they can change the
# "decreaseAmountOfResourcesForDev" property from "false" to "true" and create an apk that doesn't contain all resources (e.g. language
# strings or drawable density buckets) resulting in faster builds.
decreaseAmountOfResourcesForDev=false



# OVERRIDDEN BY CI ==========================================================================================================================
# Release track used by plugin https://github.com/Triple-T/gradle-play-publisher to define where to upload the APK (production,alpha or
# beta). Defaulting to 'alpha'. Available values are: 'production', 'rollout', 'beta', 'alpha'.
releaseTrack=alpha

# The location of the service account key that allows access to our service account in order to automate deployments to the Playstore with
# the https://github.com/Triple-T/gradle-play-publisher plugin.
pk12FileLocation=overridden

# Number provided by CI to mark builds with (used as part of versionCode).
buildNumber=0

# todo: change this flag while in jenkins
# Flag whether build is running on CI server or not. Certain changes in the build may occur based on this flag.
isRunningInCI=false



###########################
#
#   PROJECT CONFIGURATION
#
###########################

APK_NAME        = changeme
APPLICATION_ID  = com.contenderapps.apc

